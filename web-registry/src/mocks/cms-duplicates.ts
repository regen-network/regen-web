import duplicateMocks from './mock-cms-duplicates.json';

// These types were generated by https://quicktype.io - they have a VSCode extenstion that makes it easy to paste over from our json mock and seems to do a really good job. By default it will all types though and we probably want to avoid that and just the const. We shouldn't have to maintain this long, just until we have the CMS up, so it's a shortcut to avoid manually typing all of this.

// The process is pretty much:
// 1. Modify the JSON file
// 2. Delete current types
// 3. Install the extension (or go to website) - copy JSON
// 4. Paste or use plugin to generate types. Name top type "MockCMS"
// 5. Remove `` from generated types

export interface MockCMS {
  contentByPage: ContentByPage;
  outcomes: Outcome[];
  resources: Resource[];
  creditClasses: CreditClass[];
  methodologies: Methodology[];
}

export interface ContentByPage {
  CreateMethodology: CreateMethodology;
  CreateCreditClass: CreateCreditClass;
  MethodologyReviewProcess: MethodologyReviewProcess;
}

export interface CreateCreditClass {
  footerLink: string;
  heroSection: HeroSection;
  stepCardSection: CreateCreditClassStepCardSection;
  creditTypeSection: CreditTypeSection;
  outcomeSection: HeroSection;
  bottomBanner: BottomBanner;
}

export interface BottomBanner {
  title: string;
  description: string;
  btnText: string;
  href: string;
}

export interface CreditTypeSection {
  title: string;
  subtitleTop: string;
  descriptionTop: string;
  subtitleBottom: string;
  descriptionBottom: string;
  institutionalCards: Card[];
  flexCreditCards: Card[];
}

export interface Card {
  title: string;
  description: string;
  icon: string;
  tooltip?: string;
}

export interface HeroSection {
  title: string;
  description: string;
}

export interface CreateCreditClassStepCardSection {
  title: string;
  mainDescription: string;
  stepCards: Step[];
}

export interface FAQ {
  question: string;
  answer: string;
}

export interface CreateMethodology {
  footerLink: string;
  heroSection: HeroSection;
  stepCardSection: CreateMethodologyStepCardSection;
  peerReviewSection: BottomBanner;
  createCreditClassSection: BottomBanner;
}

export interface CreateMethodologyStepCardSection {
  title: string;
  mainDescription: string;
  bottomTitle: string;
  bottomDescription: string;
  stepCards: Step[];
}

export interface MethodologyReviewProcess {
  modalContent: string;
  heroBannerTop: HeroSection;
  internalReviewSection: TernalReviewSection;
  externalReviewSection: TernalReviewSection;
  stepCardSections: StepCardSections;
  heroBannerBottom: BottomBanner;
}

export interface TernalReviewSection {
  title: string;
  timespan: string;
  description: string;
  btnText: string;
  href: string;
  disclaimerTop?: string;
  disclaimerBottom: string;
}

export interface StepCardSections {
  public: Public;
  scientific: Scientific;
}

export interface Public {
  title: string;
  stepCards: Step[];
}

export interface Step {
  stepNumber: number;
  isActive: boolean;
  icon: string;
  image?: string;
  tagName?: string;
  title: string;
  description: string;
  btnText?: string;
  href?: string;
  faqs?: FAQ[];
  videoSrc?: string;
}

export interface Scientific {
  title: string;
  stepCards: Step[];
}

export interface CreditClass {
  name: string;
  id: string;
  version: string;
  creditDesigner: string;
  ecoType: string;
  ecoServiceType: string;
  approvedMethodology: string;
  methodologyUrl: string;
  methodologyId: string;
  description: string;
  imgSrc: string;
  overviewCards: Card[];
  buyer: Buyer;
  landSteward: LandSteward;
  impact: Impact[];
  sdgs: Sdg[];
}

export interface Buyer {
  heroSection: HeroSection;
  projectsTitle: string;
  resources: Resource[];
  videos: Article[];
}

export interface Resource {
  title: string;
  description: string;
  imgSrc: string;
  btnText: string;
  href: string;
  lastUpdated: string;
  target?: string;
}

export interface Article {
  title: string;
  date: string;
  author: string;
  imgSrc: string;
  url: string;
  btnText: string;
  type: string;
}

export interface Impact {
  name: string;
  description: string;
  monitored: boolean;
  imgSrc: string;
}

export interface LandSteward {
  ctaHref: string;
  heroSection: HeroSection;
  featuredProjectIds: string[];
  connectSection: ConnectSection;
  resources: Resource[];
  videos: Article[];
  steps: LandStewardStep[];
}

export interface ConnectSection {
  header: string;
  links: Link[];
}

export interface Link {
  name: string;
  description: string;
  icon: string;
  href: string;
}

export interface LandStewardStep {
  title: string;
  steps: Step[];
  preTitle?: string;
  description?: string;
}

export interface Sdg {
  imageUrl: string;
  title: string;
}

export interface Methodology {
  name: string;
  id: string;
  description: string;
  imageSrc: string;
  imageAlt: string;
  documentationUrl: string;
  documentationTitle: string;
  documentationImage: string;
  documentationImageAltText: string;
  version: string;
  program: string;
  methodologyDesigner: string;
  uncertaintyDeductions: string;
  measurementApproach: string;
  creditClassName: string;
  creditClassImage: string;
  creditClassImageAltText: string;
  creditClassUrl: string;
  testMethodologyTitle: string;
  testMethodologyDescription: string;
  steps: MethodologyStep[];
  impact: Impact[];
  resources: Resource[];
}

export interface Image {
  publicURL: string;
}

export interface MethodologyStep {
  stepNumber: number;
  title: string;
  isActive: boolean;
  description: string;
  imageSrc: string;
  imageAlt: string;
  faqs: FAQ[];
}

export interface Outcome {
  imgSrc: string;
  title: string;
  description: string;
}

const mock: MockCMS = duplicateMocks;

export const outcomes = mock.outcomes;
export const resources = mock.resources;
export const contentByPage = mock.contentByPage;
export const creditClasses = mock.creditClasses;
export const methodologies = mock.methodologies;
